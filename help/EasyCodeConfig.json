{
  "author" : "makejava",
  "version" : "1.2.6",
  "userSecure" : "",
  "currTypeMapperGroupName" : "Default",
  "currTemplateGroupName" : "Default",
  "currColumnConfigGroupName" : "Default",
  "currGlobalConfigGroupName" : "Default",
  "typeMapper" : {
    "Default" : {
      "name" : "Default",
      "elementList" : [ {
        "matchType" : "REGEX",
        "columnType" : "varchar(\\(\\d+\\))?",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "char(\\(\\d+\\))?",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "(tiny|medium|long)*text",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "decimal(\\(\\d+,\\d+\\))?",
        "javaType" : "java.lang.Double"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "bigint",
        "javaType" : "java.lang.Long"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "datetime",
        "javaType" : "java.util.Date"
      }, {
        "matchType" : "REGEX",
        "columnType" : "tinyint",
        "javaType" : "java.util.Boolean"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "int",
        "javaType" : "java.lang.Integer"
      } ]
    }
  },
  "template" : {
    "Default" : {
      "name" : "Default",
      "elementList" : [ {
        "name" : "controller.java.vm",
        "code" : "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Controller\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/controller\"))\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;\n\nimport com.github.pagehelper.PageHelper;\nimport com.github.pagehelper.PageSerializable;\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\n##jdk8和jdk17的Resource、Valid包不在同一个地方\nimport javax.annotation.Resource;\nimport javax.validation.Valid;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n##表注释\n/**\n * #if(${tableInfo.comment})${tableInfo.comment}#end\n */\n@RestController\n@RequestMapping(\"$!tool.firstLowerCase($tableInfo.name)\")\npublic class $!{tableName} {\n\n    @Resource\n    private $!{tableInfo.name}Service $!tool.firstLowerCase($tableInfo.name)Service;\n\n    /**\n     * 根据ID查询\n\t * @param id ID\n     */\n    @GetMapping(\"queryById\")\n    public $!{tableInfo.name} queryById(@RequestParam $!pk.shortType id) {\n        return $!{tool.firstLowerCase($tableInfo.name)}Service.queryById(id);\n    }\n\t\n\t/**\n     * 查询全部\n     */\n    @GetMapping(\"findAll\")\n    public List<$!{tableInfo.name}> findAll() {\n        return $!{tool.firstLowerCase($tableInfo.name)}Service.findAll();\n    }\n\t\n\t/**\n     * 查询全部（分页）\n\t * @param pageNum 起始页\n\t * @param pageSize\t每页数据量\n     */\n    @GetMapping(\"findAllPage\")\n    public PageSerializable<$!{tableInfo.name}> findAllPage(@RequestParam(defaultValue = \"1\") Integer pageNum,@RequestParam(defaultValue = \"10\") Integer pageSize) {\n\t\tPageHelper.startPage(pageNum, pageSize);\n        return PageSerializable.of($!{tool.firstLowerCase($tableInfo.name)}Service.findAll());\n    }\n\t\n\t/**\n     * 新增\n\t * @param $!{tool.firstLowerCase($tableInfo.name)}\n     */\n    @PostMapping(\"insert\")\n    public Integer insert(@RequestBody @Valid $!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)}) {\n        return $!{tool.firstLowerCase($tableInfo.name)}Service.insert($!{tool.firstLowerCase($tableInfo.name)});\n    }\n\n    /**\n     * 修改\n\t * @param $!{tool.firstLowerCase($tableInfo.name)}\n     */\n    @PostMapping(\"update\")\n    public Integer update(@RequestBody @Valid $!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)}) {\n        return $!{tool.firstLowerCase($tableInfo.name)}Service.update($!{tool.firstLowerCase($tableInfo.name)});\n    }\n\n    /**\n     * 删除\n\t * @param id ID\n     */\n    @PostMapping(\"deleteById\")\n    public Integer deleteById(@RequestParam $!pk.shortType id) {\n        return $!{tool.firstLowerCase($tableInfo.name)}Service.deleteById(id);\n    }\n\n}"
      }, {
        "name" : "service.java.vm",
        "code" : "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Service\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao;\n##jdk8和jdk17的Resource包不在同一个地方\nimport javax.annotation.Resource;\nimport org.springframework.stereotype.Service;\nimport java.util.List;\n\n@Service\npublic class $!{tableName} {\n    @Resource\n    private $!{tableInfo.name}Dao $!tool.firstLowerCase($!{tableInfo.name})Dao;\n\t\n\t/**\n\t * 根据ID查询\n\t */\n    public $!{tableInfo.name} queryById($!pk.shortType $!pk.name) {\n        return $!{tool.firstLowerCase($!{tableInfo.name})}Dao.queryById($!pk.name);\n    }\n\t\n\t/**\n\t * 查询全部\n\t */\n\tpublic List<$!{tableInfo.name}> findAll() {\n        return $!{tool.firstLowerCase($!{tableInfo.name})}Dao.findAll();\n    }\n\t\n\t/**\n\t * 新增\n\t */\n    public Integer insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {\n        return $!{tool.firstLowerCase($!{tableInfo.name})}Dao.insert($!tool.firstLowerCase($!{tableInfo.name}));\n    }\n\n\t/**\n\t * 跟新\n\t */\n    public Integer update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {\n        return $!{tool.firstLowerCase($!{tableInfo.name})}Dao.update($!tool.firstLowerCase($!{tableInfo.name}));\n    }\n\n\t/**\n\t * 删除\n\t */\n    public Integer deleteById($!pk.shortType $!pk.name) {\n        return $!{tool.firstLowerCase($!{tableInfo.name})}Dao.deleteById($!pk.name);\n    }\n}"
      }, {
        "name" : "dao.java.vm",
        "code" : "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Dao\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/dao\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dao;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\n\nimport org.apache.ibatis.annotations.Mapper;\nimport org.apache.ibatis.annotations.Param;\nimport java.util.List;\n\n@Mapper\npublic interface $!{tableName} {\n\n\t/**\n\t * 根据ID查询\n\t */\n    $!{tableInfo.name} queryById(@Param(\"$!pk.name\") $!pk.shortType $!pk.name);\n\t\n\t/**\n\t * 查询全部\n\t */\n\tList<$!{tableInfo.name}> findAll();\n\n\t/**\n\t * 新增\n\t */\n    int insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n\t/**\n\t * 更新\n\t */\n    int update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n\t/**\n\t * 删除\n\t */\n    int deleteById(@Param(\"$!pk.name\") $!pk.shortType $!pk.name);\n\n}"
      }, {
        "name" : "mapper.xml.vm",
        "code" : "##引入mybatis支持\n$!{mybatisSupport.vm}\n\n##设置保存名称与保存位置\n$!callback.setFileName($tool.append($!{tableInfo.name}, \"Mapper.xml\"))\n$!callback.setSavePath($tool.append($modulePath, \"/src/main/resources/mapper\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"$!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao\">\n\n    <resultMap type=\"$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}\" id=\"BaseResultMap\">\n#foreach($column in $tableInfo.fullColumn)\n        <result property=\"$!column.name\" column=\"$!column.obj.name\" jdbcType=\"$!column.ext.jdbcType\"/>\n#end\n    </resultMap>\n\t\n\t<sql id=\"Base_Column_List\">#allSqlColumn()</sql>\n\n\t<!-- 根据ID查询 -->\n    <select id=\"queryById\" resultMap=\"BaseResultMap\">\n        select\n          <include refid=\"Base_Column_List\" />\n        from $!tableInfo.obj.name\n\t\t<where>\n            <if test=\"id != null\">\n                $!pk.obj.name = #{$!pk.name}\n            </if>\n        </where>\n    </select>\n\t\n\t<!-- 查询全部 -->\n\t<select id=\"findAll\" resultMap=\"BaseResultMap\">\n        select\n          <include refid=\"Base_Column_List\" />\n        from $!tableInfo.obj.name\n    </select>\n\t\n\t<!-- 新增 -->\n    <insert id=\"insert\" parameterType=\"$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}\">\n        insert into $!{tableInfo.obj.name}\n\t\t<trim prefix=\"(\" suffix=\")\" suffixOverrides=\",\">\n\t\t#foreach($column in $tableInfo.fullColumn)\n\t\t<if test=\"$!column.name != null\">\n                $!column.obj.name,\n        </if>\n\t\t#end\n\t\t</trim>\n\t\t<trim prefix=\"values (\" suffix=\")\" suffixOverrides=\",\">\n\t\t#foreach($column in $tableInfo.fullColumn)\n\t\t<if test=\"$!column.name != null\">\n                #{$!column.name},\n        </if>\n\t\t#end\n\t\t</trim>\n    </insert>\n\t\n\t<!-- 更新 -->\n    <update id=\"update\" parameterType=\"$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}\">\n        update $!{tableInfo.obj.name}\n        <set>\n\t\t\t#foreach($column in $tableInfo.fullColumn)\n\t\t\t<if test=\"$!column.name != null\">\n\t\t\t\t$!column.obj.name = #{$!column.name},\n\t\t\t</if>\n\t\t\t#end\n\t\t</set>\n\t\t<where>\n            <if test=\"id != null\">\n                $!pk.obj.name = #{$!pk.name}\n            </if>\n        </where>\n    </update>\n\t\n\t<!-- 删除 -->\n    <delete id=\"deleteById\">\n        delete from $!{tableInfo.obj.name}\n\t\t<where>\n            <if test=\"id != null\">\n                $!pk.obj.name = #{$!pk.name}\n            </if>\n        </where>\n    </delete>\n\n</mapper>\n"
      }, {
        "name" : "entity.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/entity\", \".java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"entity\")\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport lombok.Data;\n\n@Data\npublic class $!{tableInfo.name}{\n    private static final long serialVersionUID = $!tool.serial();\n#foreach($column in $tableInfo.fullColumn)\n    /**\n     * #if(${column.comment})${column.comment}\n#end\n     */\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n\n#end\n}"
      } ]
    }
  },
  "columnConfig" : {
    "Default" : {
      "name" : "Default",
      "elementList" : [ {
        "title" : "disable",
        "type" : "BOOLEAN",
        "selectValue" : ""
      }, {
        "title" : "support",
        "type" : "SELECT",
        "selectValue" : "add,edit,query,del,ui"
      } ]
    }
  },
  "globalConfig" : {
    "Default" : {
      "name" : "Default",
      "elementList" : [ {
        "name" : "autoImport.vm",
        "value" : "##自动导入包（仅导入实体属性需要的包，通常用于实体类）\n#foreach($import in $importList)\nimport $!import;\n#end"
      }, {
        "name" : "define.vm",
        "value" : "##（Velocity宏定义）\n\n##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(\"Test\")\n#macro(setTableSuffix $suffix)\n    #set($tableName = $!tool.append($tableInfo.name, $suffix))\n#end\n\n##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(\"Test\")\n#macro(setPackageSuffix $suffix)\n#if($suffix!=\"\")package #end#if($tableInfo.savePackageName!=\"\")$!{tableInfo.savePackageName}.#{end}$!suffix;\n#end\n\n##定义直接保存路径与文件名简化的宏定义，调用方式：#save(\"/entity\", \".java\")\n#macro(save $path $fileName)\n    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))\n    $!callback.setFileName($tool.append($tableInfo.name, $fileName))\n#end\n\n##定义表注释的宏定义，调用方式：#tableComment(\"注释信息\")\n#macro(tableComment $desc)\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})$desc\n *\n * @author $!author\n * @since $!time.currTime()\n */\n#end\n\n##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)\n#macro(getSetMethod $column)\n\n    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {\n        return $!{column.name};\n    }\n\n    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {\n        this.$!{column.name} = $!{column.name};\n    }\n#end"
      }, {
        "name" : "init.vm",
        "value" : "##初始化区域\n\n##去掉表的t_前缀\n$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.replaceFirst(\"book_\",\"\")))\n\n##参考阿里巴巴开发手册，POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误\n#foreach($column in $tableInfo.fullColumn)\n#if($column.name.startsWith(\"is\") && $column.type.equals(\"java.lang.Boolean\"))\n    $!column.setName($tool.firstLowerCase($column.name.substring(2)))\n#end\n#end\n\n##实现动态排除列\n#set($temp = $tool.newHashSet(\"testCreateTime\", \"otherColumn\"))\n#foreach($item in $temp)\n    #set($newList = $tool.newArrayList())\n    #foreach($column in $tableInfo.fullColumn)\n        #if($column.name!=$item)\n            ##带有反回值的方法调用时使用$tool.call来消除返回值\n            $tool.call($newList.add($column))\n        #end\n    #end\n    ##重新保存\n    $tableInfo.setFullColumn($newList)\n#end\n\n##对importList进行篡改\n#set($temp = $tool.newHashSet())\n#foreach($column in $tableInfo.fullColumn)\n    #if(!$column.type.startsWith(\"java.lang.\"))\n        ##带有反回值的方法调用时使用$tool.call来消除返回值\n        $tool.call($temp.add($column.type))\n    #end\n#end\n##覆盖\n#set($importList = $temp)"
      }, {
        "name" : "mybatisSupport.vm",
        "value" : "##针对Mybatis 进行支持，主要用于生成xml文件\n#foreach($column in $tableInfo.fullColumn)\n    ##储存列类型\n    $tool.call($column.ext.put(\"sqlType\", $tool.getField($column.obj.dataType, \"typeName\")))\n    #if($tool.newHashSet(\"java.lang.Boolean\", \"boolean\").contains($column.type))\n        #set($jdbcType=\"BOOLEAN\")\n    #elseif($tool.newHashSet(\"java.lang.String\").contains($column.type))\n        #set($jdbcType=\"VARCHAR\")\n    #elseif($tool.newHashSet(\"java.lang.Byte\", \"byte\").contains($column.type))\n        #set($jdbcType=\"BYTE\")\n    #elseif($tool.newHashSet(\"java.lang.Integer\", \"int\", \"java.lang.Short\", \"short\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Long\", \"long\").contains($column.type))\n        #set($jdbcType=\"BIGINT\")\n    #elseif($tool.newHashSet(\"java.lang.Float\", \"float\", \"java.lang.Double\", \"double\").contains($column.type))\n        #set($jdbcType=\"NUMERIC\")\n    #elseif($tool.newHashSet(\"java.util.Date\", \"java.sql.Timestamp\", \"java.time.Instant\", \"java.time.LocalDateTime\", \"java.time.OffsetDateTime\", \"\tjava.time.ZonedDateTime\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #elseif($tool.newHashSet(\"java.sql.Date\", \"java.time.LocalDate\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #else\n        ##其他类型\n        #set($jdbcType=\"VARCHAR\")\n    #end\n    $tool.call($column.ext.put(\"jdbcType\", $jdbcType))\n#end\n\n##定义宏，查询所有列\n#macro(allSqlColumn)#foreach($column in $tableInfo.fullColumn)$column.obj.name#if($velocityHasNext), #end#end#end\n"
      } ]
    }
  }
}